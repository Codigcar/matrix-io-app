// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TPCSDKSwift
import Foundation
import PassKit
import Security
import Swift
import UIKit
import WatchConnectivity
import os.log
import os
@objc public enum SdkVariant : Swift.Int {
  case PPROD
  case PROD
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SdkConfigureResult : Swift.Int {
  case OK
  case Fail
  case Error
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IsCardDigitizedResult : Swift.Int {
  case CardNotDigitized
  case CardAlreadyDigitized
  case Error
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CardScheme : Swift.Int {
  case Mastercard
  case Visa
  case Amex
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TokenState : Swift.Int {
  case Activate
  case Suspend
  case Resume
  case Delete
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CardAssetSize : Swift.Int {
  case S
  case M
  case L
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class FundingCard : ObjectiveC.NSObject {
  @objc public var scheme: Swift.String?
  @objc public var encryptedPayload: Swift.String?
  @objc public var primaryAccountIdentifier: Swift.String?
  public init(scheme: TPCSDKSwift.CardScheme? = nil, encryptedPayload: Swift.String? = nil, primaryAccountIdentifier: Swift.String? = nil)
  @objc public init(schemeString: Swift.String? = nil, encryptedPayload: Swift.String? = nil, primaryAccountIdentifier: Swift.String? = nil)
  @available(swift, obsoleted: 3.1)
  @objc public init(scheme: TPCSDKSwift.CardScheme, encryptedPayload: Swift.String? = nil)
  @available(swift, obsoleted: 3.1)
  @objc public init(primaryAccountIdentifier: Swift.String? = nil)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Device : ObjectiveC.NSObject, Swift.Codable {
  @objc public var id: Swift.String?
  @objc public var name: Swift.String?
  @objc public var type: Swift.String?
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Token : ObjectiveC.NSObject, Swift.Codable {
  @objc public var id: Swift.String?
  @objc public var state: Swift.String?
  @objc public var suffix: Swift.String?
  @objc public var expiryDate: Swift.String?
  @objc public var device: TPCSDKSwift.Device?
  @objc public var tokenRequestor: TPCSDKSwift.TokenRequestor?
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TokenRequestorAsset : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: Swift.String?
  @objc public var data: Swift.String?
  @objc public var height: Swift.Int
  @objc public var width: Swift.Int
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CardList : ObjectiveC.NSObject, Swift.Codable {
  @objc public var id: Swift.String?
  @objc public var state: Swift.String?
  @objc public var expiryDate: Swift.String?
  @objc public var type: Swift.String?
  @objc public var primaryScheme: Swift.String?
  @objc public var auxiliaryScheme: Swift.String?
  @objc public var userAccount: Swift.String?
  @objc public var bankCode: Swift.String?
  @objc public var prefix: Swift.String?
  @objc public var suffix: Swift.String?
  @objc public var psn: Swift.String?
  @objc public var cardholderName: Swift.String?
  @objc public var registrationCode: Swift.String?
  @objc public var tncUrl: Swift.String?
  @objc public var imageUrl: Swift.String?
  @objc public var tokenUniqueReferences: [Swift.String]?
  @objc public var panUniqueReferences: [Swift.String]?
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CardAsset : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: Swift.String?
  @objc public var data: Swift.String?
  @objc public var height: Swift.Int
  @objc public var width: Swift.Int
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PushMethod : ObjectiveC.NSObject, Swift.Codable {
  @objc public var pushHandler: Swift.String?
  @objc public var platformType: Swift.String?
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TokenRequestor : ObjectiveC.NSObject, Swift.Codable {
  @objc public var id: Swift.String?
  @objc public var name: Swift.String?
  @objc public var logoURL: Swift.String?
  @objc public var logoId: Swift.String?
  @objc public var pushMethods: [TPCSDKSwift.PushMethod]?
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PendingActivationPass : ObjectiveC.NSObject {
  @objc public var localPKPass: PassKit.PKPass?
  @objc public var remotePKPass: PassKit.PKPass?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class CardDigitizationResult : ObjectiveC.NSObject {
  @objc public var result: TPCSDKSwift.IsCardDigitizedResult
  @objc public var localDevice: TPCSDKSwift.IsCardDigitizedResult
  @objc public var localPKPass: PassKit.PKPass?
  @objc public var remoteDevice: TPCSDKSwift.IsCardDigitizedResult
  @objc public var remotePKPass: PassKit.PKPass?
  @objc deinit
}
@objc public protocol TPCSDKProvisionDelegate : ObjectiveC.NSObjectProtocol {
  @objc func onProvisionCompletion(pass: PassKit.PKPaymentPass?, error: Swift.Error?)
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class TPCSDK : ObjectiveC.NSObject {
  @objc public static var tpcsdkVersion: Swift.String
  @objc public static func reset()
  @objc public static func configure(variant: TPCSDKSwift.SdkVariant, issuerId: Swift.String) -> TPCSDKSwift.SdkConfigureResult
  @objc public static func configure(url: Swift.String, issuerId: Swift.String) -> TPCSDKSwift.SdkConfigureResult
  @objc public static func isCardDigitized(card: TPCSDKSwift.FundingCard? = nil, primaryAccountIdentifier: Swift.String? = nil, primaryAccountNumberSuffix: Swift.String? = nil, completion: @escaping (Swift.String?, TPCSDKSwift.IsCardDigitizedResult) -> Swift.Void)
  @objc public static func getCardDigitizationResult(card: TPCSDKSwift.FundingCard? = nil, primaryAccountIdentifier: Swift.String? = nil, primaryAccountNumberSuffix: Swift.String? = nil, completion: @escaping (Swift.String?, TPCSDKSwift.CardDigitizationResult) -> Swift.Void)
  @objc public static func provision(fromController controller: UIKit.UIViewController, primaryAccountSuffix: Swift.String, cardholderName: Swift.String?, scheme: TPCSDKSwift.CardScheme, encryptedPayload: Swift.String, authorizationCode: Swift.String, provisionDelegate: TPCSDKSwift.TPCSDKProvisionDelegate? = nil)
  @objc public static func provision(fromController controller: UIKit.UIViewController, primaryAccountSuffix: Swift.String, cardholderName: Swift.String?, schemeString: Swift.String, encryptedPayload: Swift.String, authorizationCode: Swift.String, productId: Swift.String? = "", primaryAccountIdentifier: Swift.String? = "", provisionDelegate: TPCSDKSwift.TPCSDKProvisionDelegate? = nil)
  @objc public static func getPendingActivationPass(card: TPCSDKSwift.FundingCard, completion: @escaping (TPCSDKSwift.PendingActivationPass?) -> Swift.Void)
  @objc public static func activatePass(pass: PassKit.PKPass, card: TPCSDKSwift.FundingCard, authorizationCode: Swift.String, nonce: Swift.String?, completion: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  @objc public static func getPaymentPasses(completion: @escaping ([PassKit.PKPass]?, [PassKit.PKPaymentPass]?) -> Swift.Void)
  @objc @available(iOS 13.4, *)
  public static func getSecureElementPaymentPasses(completion: @escaping ([PassKit.PKPass]?, [PassKit.PKSecureElementPass]?) -> Swift.Void)
  @objc public static func getTokens(card: TPCSDKSwift.FundingCard, completion: @escaping ([TPCSDKSwift.Token]?) -> Swift.Void)
  @objc public static func getTokenRequestorAsset(assetId: Swift.String, completion: @escaping ([TPCSDKSwift.TokenRequestorAsset]?) -> Swift.Void)
  @objc public static func updateTokenState(tokenId: Swift.String, tokenRequestorId: Swift.String, scheme: TPCSDKSwift.CardScheme, authorizationCode: Swift.String, action: TPCSDKSwift.TokenState, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc public static func updateTokenState(tokenId: Swift.String, tokenRequestorId: Swift.String, schemeString: Swift.String, authorizationCode: Swift.String, action: TPCSDKSwift.TokenState, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc public static func getCards(userId: Swift.String, authorizationCode: Swift.String, kyc: Swift.String, completion: @escaping ([TPCSDKSwift.CardList]?) -> Swift.Void)
  @objc public static func getCardAsset(cardId: Swift.String, kyc: Swift.String, size: TPCSDKSwift.CardAssetSize, completion: @escaping (TPCSDKSwift.CardAsset?) -> Swift.Void)
  @objc public static func getPayload(authorizationCode: Swift.String, cardId: Swift.String, kyc: Swift.String, completion: @escaping (Swift.String?) -> Swift.Void)
  @objc public static func getEligibleTokenRequestor(card: TPCSDKSwift.FundingCard, publicKeyIdentifier: Swift.String, completion: @escaping ([TPCSDKSwift.TokenRequestor]?) -> Swift.Void)
  @objc public static func schemePushProvision(card: TPCSDKSwift.FundingCard, publicKeyIdentifier: Swift.String, authorizationCode: Swift.String, termsAndConditionsAccepted: Swift.Bool, callbackUrl: Swift.String, callbackType: Swift.String, pushHandler: Swift.String, completion: @escaping (Swift.String?) -> Swift.Void)
  @objc deinit
  @objc override dynamic public init()
}
